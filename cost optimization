did u exp with aws lamdba?
can you write lambda automation task by using python script ?
Fully automated AWS resource cleanup across all AWS regions by using lambda
Terminate all stopped EC2 instances
Delete all available (unattached) EBS volumes
Release all unattached Elastic IPs

pre req:
1.aws lamda function with role
2.ec2 full acess given in lambda role
3.copy lambda function & test & deploy faces error memory issue
4.edit configur in lambda function timeout 5min 1024 cpu & ram then run again


lamdafunction
------------------------
import boto3

def lambda_handler(event, context):
    ec2_client = boto3.client('ec2', region_name='us-east-1')
    regions_response = ec2_client.describe_regions()
    regions = [region['RegionName'] for region in regions_response['Regions']]

    for region in regions:
        print(f"\nProcessing region: {region}")
        ec2 = boto3.client('ec2', region_name=region)

        # 1. Terminate stopped instances
        instances = ec2.describe_instances(
            Filters=[{'Name': 'instance-state-name', 'Values': ['stopped']}]
        )
        for reservation in instances['Reservations']:
            for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                print(f"Terminating instance: {instance_id}")
                ec2.terminate_instances(InstanceIds=[instance_id])

        # 2. Delete available EBS volumes
        volumes = ec2.describe_volumes(
            Filters=[{'Name': 'status', 'Values': ['available']}]
        )
        for volume in volumes['Volumes']:
            volume_id = volume['VolumeId']
            print(f"Deleting volume: {volume_id}")
            ec2.delete_volume(VolumeId=volume_id)

        # 3. Release unattached Elastic IPs
        addresses = ec2.describe_addresses()
        for address in addresses['Addresses']:
            if 'InstanceId' not in address or address['InstanceId'] is None:
                allocation_id = address.get('AllocationId')
                if allocation_id:
                    print(f"Releasing unattached Elastic IP: {allocation_id}")
                    ec2.release_address(AllocationId=allocation_id)

    return {
        "statusCode": 200,
        "body": "EC2 cleanup completed successfully"
    }
 
